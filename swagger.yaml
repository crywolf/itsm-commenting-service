basePath: /
consumes:
- application/json
definitions:
  Comment:
    description: Comment object
    properties:
      created_at:
        description: Time when the resource was created
        format: date-time
        type: string
        x-go-name: CreatedAt
      created_by:
        $ref: '#/definitions/UserInfo'
      entity:
        description: Entity represents some external entity reference in the form
          "&lt;entity&gt;:&lt;UUID&gt;"
        example: incident:f49d5fd5-8da4-4779-b5ba-32e78aa2c444
        format: string
        type: string
        x-go-name: Entity
      external_id:
        description: ID in external system
        type: string
        x-go-name: ExternalID
      read_by:
        $ref: '#/definitions/ReadByList'
      text:
        description: Content of the comment
        type: string
        x-go-name: Text
      uuid:
        format: uuid
        readOnly: true
        type: string
        x-go-name: UUID
    required:
    - uuid
    - entity
    - text
    - created_at
    - created_by
    type: object
    x-go-package: github.com/KompiTech/itsm-commenting-service/pkg/domain/comment
  Entity:
    title: Entity represents some external entity reference in the form "<entity>:<UUID>"
    type: object
    x-go-package: github.com/KompiTech/itsm-commenting-service/pkg/domain/entity
  ReadBy:
    description: ReadBy stores info when some user read this comment
    properties:
      time:
        format: date-time
        type: string
        x-go-name: Time
      user:
        $ref: '#/definitions/UserInfo'
    required:
    - time
    - user
    type: object
    x-go-package: github.com/KompiTech/itsm-commenting-service/pkg/domain/comment
  ReadByList:
    description: ReadByList is the list of users who read this comment
    items:
      $ref: '#/definitions/ReadBy'
    type: array
    x-go-package: github.com/KompiTech/itsm-commenting-service/pkg/domain/comment
  UserInfo:
    description: UserInfo represents basic info about user
    properties:
      name:
        type: string
        x-go-name: Name
      org_display_name:
        example: KompiTech
        type: string
        x-go-name: OrgDisplayName
      org_name:
        example: a897a407-e41b-4b14-924a-39f5d5a8038f.kompitech.com
        type: string
        x-go-name: OrgName
      surname:
        type: string
        x-go-name: Surname
      uuid:
        format: uuid
        type: string
        x-go-name: UUID
    required:
    - uuid
    - name
    - surname
    - org_display_name
    - org_name
    type: object
    x-go-package: github.com/KompiTech/itsm-commenting-service/pkg/domain/comment
info:
  description: |-
    Documentation for Commenting service API.

    It works for both comments and worknotes resources. If you want to use it for worknotes, just switch 'comment'
    part of the endpoint path with 'worknote', for example:

    "GET /comments" endpoint returns comments

    "GET /worknotes" endpoint returns worknotes
  title: Commenting service API
  version: 1.0.0
paths:
  /comments:
    get:
      description: Returns a list of comments from the repository filtered by some
        parameters
      operationId: ListComments
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
        x-go-name: Authorization
      - format: uuid
        in: header
        name: grpc-metadata-space
        required: true
        type: string
        x-go-name: ChannelID
      - description: Entity represents some external entity reference in the form
          "&lt;entity&gt;:&lt;UUID&gt;"
        example: incident:f49d5fd5-8da4-4779-b5ba-32e78aa2c444
        format: string
        in: query
        name: entity
        type: string
        x-go-name: Entity
      - default: 25
        description: Amount of records to be returned (pagination)
        format: int64
        in: query
        name: limit
        type: integer
        x-go-name: Limit
      - description: Pagination bookmark
        in: query
        name: bookmark
        type: string
        x-go-name: Bookmark
      responses:
        "200":
          $ref: '#/responses/commentsListResponse'
        "400":
          $ref: '#/responses/errorResponse400'
        "401":
          $ref: '#/responses/errorResponse401'
        "403":
          $ref: '#/responses/errorResponse403'
      tags:
      - comments
    post:
      description: Creates a new comment
      operationId: AddComment
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
        x-go-name: Authorization
      - format: uuid
        in: header
        name: grpc-metadata-space
        required: true
        type: string
        x-go-name: ChannelID
      - format: uuid
        in: header
        name: on_behalf
        type: string
        x-go-name: OnBehalf
      - description: Comment/Worknote data structure to Create.
        in: body
        name: Body
        schema:
          properties:
            entity:
              description: Entity represents some external entity reference in the
                form "&lt;entity&gt;:&lt;UUID&gt;"
              example: incident:f49d5fd5-8da4-4779-b5ba-32e78aa2c444
              type: string
              x-go-name: Entity
            external_id:
              description: ID in external system
              type: string
              x-go-name: ExternalID
            text:
              description: Content of the comment
              type: string
              x-go-name: Text
          required:
          - entity
          - text
          type: object
      responses:
        "201":
          $ref: '#/responses/createdResponse'
        "400":
          $ref: '#/responses/errorResponse400'
        "401":
          $ref: '#/responses/errorResponse401'
        "403":
          $ref: '#/responses/errorResponse403'
        "409":
          $ref: '#/responses/errorResponse409'
      tags:
      - comments
  /comments/{uuid}:
    get:
      description: Returns a single comment from the repository
      operationId: GetComment
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
        x-go-name: Authorization
      - format: uuid
        in: header
        name: grpc-metadata-space
        required: true
        type: string
        x-go-name: ChannelID
      - description: ID of the comment
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
        x-go-name: UUID
      responses:
        "200":
          $ref: '#/responses/commentResponse'
        "400":
          $ref: '#/responses/errorResponse400'
        "401":
          $ref: '#/responses/errorResponse401'
        "403":
          $ref: '#/responses/errorResponse403'
        "404":
          $ref: '#/responses/errorResponse404'
      tags:
      - comments
  /comments/{uuid}/read_by:
    post:
      description: Marks specified comment as read by user
      operationId: MarkAsReadByUser
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
        x-go-name: Authorization
      - format: uuid
        in: header
        name: grpc-metadata-space
        required: true
        type: string
        x-go-name: ChannelID
      - description: ID of the comment
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
        x-go-name: UUID
      responses:
        "201":
          $ref: '#/responses/createdResponse'
        "204":
          $ref: '#/responses/noContentResponse'
        "400":
          $ref: '#/responses/errorResponse400'
        "401":
          $ref: '#/responses/errorResponse401'
        "403":
          $ref: '#/responses/errorResponse403'
        "404":
          $ref: '#/responses/errorResponse404'
      tags:
      - comments
  /databases:
    post:
      description: Creates new databases for channel; if databases already exist it
        just returns 204 No Content
      operationId: CreateDatabases
      parameters:
      - description: Bearer token
        in: header
        name: authorization
        required: true
        type: string
        x-go-name: Authorization
      - description: ChannelID for which to create databases
        in: body
        name: Body
        schema:
          properties:
            channel_id:
              format: uuid
              type: string
              x-go-name: ChannelID
          required:
          - channel_id
          type: object
      responses:
        "201":
          $ref: '#/responses/databasesCreatedResponse'
        "204":
          $ref: '#/responses/databasesNoContentResponse'
        "400":
          $ref: '#/responses/errorResponse400'
        "401":
          $ref: '#/responses/errorResponse401'
        "403":
          $ref: '#/responses/errorResponse403'
      tags:
      - databases
produces:
- application/json
responses:
  commentResponse:
    description: Data structure representing a single comment or worknote
    schema:
      $ref: '#/definitions/Comment'
  commentsListResponse:
    description: A list of comments or worknotes
    schema:
      properties:
        bookmark:
          description: Pagination bookmark
          type: string
          x-go-name: Bookmark
        result:
          items:
            $ref: '#/definitions/Comment'
          type: array
          x-go-name: Result
      required:
      - result
      type: object
  createdResponse:
    description: Created
    headers:
      Location:
        description: URI of the resource
        example: http://localhost:8080/comments/2af4f493-0bd5-4513-b440-6cbb465feadb
        type: string
  databasesCreatedResponse:
    description: Created
  databasesNoContentResponse:
    description: No content
  errorResponse:
    description: Error
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  errorResponse400:
    description: Bad Request
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  errorResponse401:
    description: Unauthorized
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  errorResponse403:
    description: Forbidden
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  errorResponse404:
    description: Not Found
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  errorResponse409:
    description: Conflict
    schema:
      properties:
        error:
          type: string
          x-go-name: ErrorMessage
      required:
      - error
      type: object
  noContentResponse:
    description: No content
    headers:
      Location:
        description: URI of the resource
        example: http://localhost:8080/comments/2af4f493-0bd5-4513-b440-6cbb465feadb
        type: string
schemes:
- http
swagger: "2.0"
